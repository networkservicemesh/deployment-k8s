---
name: Check release branches
on:
  push:
    branches:
      - "release/**"  # We should only react to branches like "release/networkservicemesh/*/v*.*.*"
      - "!release/*"  # and ignore branches like "release/v*.*.*". "**" - any character, "*" - any character except "/"

concurrency:
  group: check-release-branches
  cancel-in-progress: true

jobs:
  check-release-branches:
    name: Check release branches
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set envs
      run: |
        echo "tag=$(echo ${{ github.event.ref }} | awk -F '/' '{print $NF}')" >> $GITHUB_ENV
        {
          echo 'branches<<EOF'
          echo $(git branch -r | grep -e "release/networkservicemesh/.*/${{ env.tag }}")
          echo EOF
        } >> $GITHUB_ENV

      # On this step we get all image names from deployments-k8s/apps folder and
      # compare them to the set of release/networkservicemesh/cmd-*/${tag} branches.
      # If the sets of branches and images are equal then we merge all
      # release/networkservicemesh/cmd-*/${tag} branches into release/${tag} branch.
    - name: Check release branches
      run: |
        images=$(grep -roh 'apps' -e "ghcr\.io\/networkservicemesh\/ci\/.*" | cut -d'/' -f4 | cut -d':' -f1 | sort -u)
        branches=$(echo ${{ env.branches }} | tr ' ' '\n' | cut -d'/' -f4 | sort -u)
        diff <(echo "$branches") <(echo "$images")

    - name: Merge branches
      run: |
        git config --global user.email "nsmbot@networkservicmesh.io"
        git config --global user.name "NSMBot"

        git checkout -b release/${{ env.tag }}
        for branch in ${{ env.branches }}; do
          git merge $branch
        done

        git push -u origin release/${{ env.tag }}

      # After merging all release branches we remove them from remote deployments-k8s
    - name: Remove release branches
      run: |
        for branch in ${{ env.branches }}; do
          branch=${branch#"origin/"}
          gh api \
            --method DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/networkservicemesh/deployments-k8s/git/refs/heads/$branch
        done
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
